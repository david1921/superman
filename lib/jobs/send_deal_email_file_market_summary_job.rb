require 'resque-timeout'
module Jobs
  class SendDealEmailFileMarketSummaryJob
    include Analog::Say

    Resque::Plugins::Timeout.timeout = 2400

    @queue = :entertainment_send_market_summary

    EST_PUBS = %w(entertainmentdetroit entertainmentdetroitwest entertainmentdetroiteast
                  entertainmentorlando entertainmentnewjerseysouth entertainmentbaltimore
                  entertainmentbuffalo entertainmentgrandrapids entertainmentcolumbus
                  entertainmentcincinnati)
    CST_PUBS = %w(entertainmentdallas entertainmentkansascity entertainmentfortworth
                  entertainmenttwincitieseast entertainmenttwincitieswest entertainmenthouston
                  entertainmentsanantonio entertainmentmilwaukee entertainmentstlouis)
    MST_PUBS = %w(entertainmenttucson entertainmentphoenixeast entertainmentphoenixwest)
    PST_PUBS = %w(entertainmenthawaii entertainmentinlandempireeast entertainmentinlandempirewest
                  entertainmentlosangelesnorth entertainmentlosangelessouth entertainmentorangecountynorth
                  entertainmentorangecountysouth entertainmentsandiegonorth entertainmentsandiegosouth
                  entertainmentseattleeast entertainmentseattlewest entertainmentportlandnortheast
                  entertainmentportlandsouthwest entertainmentvancouvereast entertainmentvancouverwest
                  entertainmentlasvegas entertainmentsacramento)

    TIME_ZONES = { 'EST' => EST_PUBS,'CST'=> CST_PUBS, 'MST' => MST_PUBS, 'PST' => PST_PUBS }

    class << self

      def perform(time_zone, dry_run = false)

        raise "Time Zone has to be EST, MST, PST or CST." unless TIME_ZONES.include?(time_zone)

        say "Starting Job"

        publisher_labels = TIME_ZONES[time_zone]

        say "For timezone #{time_zone} and publishers #{publisher_labels}"
        # This used to be a cron task generate_and_upload_deal_email_file that run for 4 diferent time zones(cron jobs used to run 7:01, 8:01, 9:01, 10:01  every weekk day)
        file_path = generate_and_upload_deal_email_file(time_zone, publisher_labels, dry_run) # this file is being analyzed by the store_deal_purchase_counts
        say "It created file #{file_path} with deal emails"

        # Stores all daily deal purchases for entertainment that date in the purchase total table
        date = Date.today.strftime('%Y%m%d')
        say "Store daily deal purchase for date #{date}"
        Export::Entertainment::DealSummaryEmailTask.store_deal_purchase_counts(file_path, date, dry_run)

        # Generate daily deal purchases file comparing end date and start date
        file_base = File.expand_path("tmp", Rails.root)
        start_date  = (Time.now - 86400).strftime('%Y%m%d')
        end_date    = Time.now.strftime('%Y%m%d')
        output_file = Export::Entertainment::DealSummaryEmailTask.generate_deal_purchase_variance_file(start_date, end_date, time_zone,  dry_run)
        say "Generate dail deal purchases comparing #{end_date} with #{start_date} and output #{output_file}."


        publishing_groups_config = UploadConfig.new(:publishing_groups)

        # Uploads the file was generated by generate_and_upload_deal_email_file
        Uploader.new(publishing_groups_config).upload("entertainment", file_path) unless dry_run # entertainment servers
        Uploader.new(publishing_groups_config).upload("entertainment_boss", file_path) unless dry_run # our ftp servers

        # Uploads the file that was generated by generate_deal_purchase_variance_file only to our servers
        Uploader.new(publishing_groups_config).upload("entertainment_boss", output_file) unless dry_run

        say "Uploaded files #{file_path} and #{output_file}."

        say "Ending Job"
      end

      private

      def generate_and_upload_deal_email_file(time_zone, publisher_labels, dry_run)

        raise "Entertainment not in the database" unless entertainment = PublishingGroup.find_by_label("entertainment")

        require File.expand_path("app/models/report/entertainment/deal_email_file")

        file                     = "ENTERTAINPUB_DYNDS_DAILYDEAL_#{time_zone}_#{Time.zone.now.strftime("%Y%m%d")}.txt"
        file_base                = File.expand_path("tmp", Rails.root)
        file_path                = File.expand_path(file, file_base)

        Rails.logger.info "Generating email file for #{publisher_labels.inspect}"

        DelimitedFile.open(file_path, '|') do |file|
          Report::Entertainment.generate_deal_email_file(entertainment, file, publisher_labels)
        end
        return file_path
      end
    end
  end
end
